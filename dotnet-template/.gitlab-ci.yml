
variables:
  PROJECT_PATH: "{{ project_location }}/{{ project_directory }}"

stages:
  - deploy
  - start
  - ansible

deploy-job:
  stage: deploy
  before_script:
    - mkdir -p $PROJECT_PATH
  script:
    - sudo find $PROJECT_PATH -mindepth 1 -maxdepth 1 ! \( -name "Logs" \) -exec rm -rf {} + # DELETE ALL FILES FIRST EXCEPT LOGS FOLDER
    - sudo cp -r * $PROJECT_PATH # COPY ALL FILES FROM CURRENT GITLAB DIRECTORY TO A SPECIFIC PROJECT PATH
  only:
    - master
  tags:
    - docker

start-job:
  stage: start
  before_script:
    - echo "Logging into Microsoft Docker Registry (Nexus)..."
    - if echo "$SONATYPE_NEXUS_PASSWORD" | docker login $SONATYPE_NEXUS_URL -u $SONATYPE_NEXUS_USERNAME --password-stdin; then
      echo "Successfully Logged into Microsoft Docker Registry";
      else
      echo "Failed to Login to Microsoft Docker Registry";
      exit 1;
      fi

    - set -e  # Exit immediately if a command exits with a non-zero status
    - echo "Ensuring Required Docker Images Exist..."
    - docker pull $SONATYPE_NEXUS_URL/dotnet/aspnet:9.0 || { echo "Failed to pull aspnet:9.0 image"; exit 1; }
    - docker pull $SONATYPE_NEXUS_URL/dotnet/sdk:9.0 || { echo "Failed to pull sdk:9.0 image"; exit 1; }
    - echo "Docker Images Pulled Successfully"
  script:
    - cd $PROJECT_PATH
    - export SONATYPE_NEXUS_URL=$SONATYPE_NEXUS_URL
    - |
      # Run docker compose up and retry once if it fails
      if ! docker compose up --build -d --remove-orphans; then
        echo "docker compose failed. Retrying with cache clearing..."
        echo "Stopping and removing existing containers..."
        docker compose down || echo "Failed to stop containers, continuing..."
        echo "Rebuilding containers without cache..."
        docker compose build --no-cache
        if ! docker compose up -d --remove-orphans; then
          echo "Retry failed. Exiting..."
          exit 1
        fi
      fi
  only:
    - master  # Add other branches/tags if needed
  tags:
    - docker

ansible-job:
  stage: ansible
  before_script:
    # Check if ansible-playbook is accessible, otherwise install it
    - if ! command -v ansible-playbook &> /dev/null; then
        echo "Installing Ansible...";
        pipx install --include-deps ansible;
        pipx ensurepath;
      fi
    - echo "Validating Ansible inventory..."
    - ansible-inventory -i ansible/hosts.yml --list  # Validate inventory
  script:
    - echo "Populating ansible_become_pass in inventory file"
    - sed -i "s/{{ ansible_host_name_placeholder }}/$ANSIBLE_HOST_NAME_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_ssh_port_placeholder }}/$ANSIBLE_HOST_PORT_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_host_placeholder }}/$ANSIBLE_HOST_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_user_placeholder }}/$ANSIBLE_USER_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_become_pass_placeholder }}/$ANSIBLE_BECOME_PASS_DELL_SERVER/" ansible/hosts.yml
    - cat ansible/hosts.yml # Optional: Verify the replacement (for debugging)
    - echo "Running Ansible playbook..."
    - ansible-playbook -i ansible/hosts.yml ansible/ansible-deploy.yml
  variables:
    SONATYPE_NEXUS_URL: $SONATYPE_NEXUS_URL
    SONATYPE_NEXUS_USERNAME: $SONATYPE_NEXUS_USERNAME
    SONATYPE_NEXUS_PASSWORD: $SONATYPE_NEXUS_PASSWORD
  only:
    - master
  tags:
    - docker