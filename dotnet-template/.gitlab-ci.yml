
variables:
  PROJECT_PATH: "{{ project_location }}/{{ project_directory }}"

stages:
  - deploy
  - start
  - ansible

deploy-job:
  stage: deploy
  before_script:
    - mkdir -p $PROJECT_PATH
  script:
    - sudo find $PROJECT_PATH -mindepth 1 -maxdepth 1 ! \( -name "Logs" \) -exec rm -rf {} + # DELETE ALL FILES FIRST EXCEPT LOGS FOLDER
    - sudo cp -r * $PROJECT_PATH # COPY ALL FILES FROM CURRENT GITLAB DIRECTORY TO A SPECIFIC PROJECT PATH
  only:
    - master
  tags:
    - docker

start-job:
  stage: start
  script:
    - cd $PROJECT_PATH
    - sudo docker-compose up --build -d --remove-orphans
  # Only run pipeline for master branch push
  only:
    - master
  tags:
    - docker

ansible-job:
  stage: ansible
  before_script:
    # Check if ansible-playbook is accessible, otherwise install it
    - if ! command -v ansible-playbook &> /dev/null; then
        echo "Installing Ansible...";
        pipx install --include-deps ansible;
        pipx ensurepath;
      fi
    - echo "Validating Ansible inventory..."
    - ansible-inventory -i ansible/hosts.yml --list  # Validate inventory
  script:
    - echo "Populating ansible_become_pass in inventory file"
    - sed -i "s/{{ ansible_host_placeholder }}/$ANSIBLE_HOST_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_user_placeholder }}/$ANSIBLE_USER_DELL_SERVER/" ansible/hosts.yml
    - sed -i "s/{{ ansible_become_pass_placeholder }}/$ANSIBLE_BECOME_PASS_DELL_SERVER/" ansible/hosts.yml
    - cat ansible/hosts.yml # Optional: Verify the replacement (for debugging)
    - echo "Running Ansible playbook..."
    - ansible-playbook -i ansible/hosts.yml ansible/ansible-deploy.yml
  only:
    - master
  tags:
    - docker
